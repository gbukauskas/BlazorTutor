@page "/Employees/{sortname?}"

@using System.Globalization
@using Microsoft.Extensions.Configuration;
@using Microsoft.Extensions.Options
@using WEBtransitions.Services
@using Microsoft.EntityFrameworkCore

@attribute [StreamRendering]

@inject IDatabaseSvc<Employee, string> dbSVC
@inject IConfiguration Configuration

@* @inject IOptions<AppSettings> AppConfiguration *@

<PageTitle>Employees</PageTitle>

@if (CurrentPage == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table empTable">
        <caption>Employees</caption>
        <thead>
            <tr>
                <th name="last_name"><a href="/Employees/@SortParameter[0]">Last name</a></th>
                <th name="first_name"><a href="/Employees/@SortParameter[1]">First name</a></th>
                <th name="title"><a href="/Employees/@SortParameter[2]">Title</a></th>
                <th name="title_courtesy"><a href="/Employees/@SortParameter[3]">Title of Courtesy</a></th>
                <th name="birth_date"><a href="/Employees/@SortParameter[4]">Birth date</a></th>
                <th name="hire_date"><a href="/Employees/@SortParameter[5]">Hire date</a></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in CurrentPage)
            {
                <tr>
                    <td>@emp.LastName</td>
                    <td>@emp.FirstName</td>
                    <td>@emp.Title</td>
                    <td>@emp.TitleOfCourtesy</td>
                    <td>@emp.BirthDate?.ToString(ActiveCulture)</td>
                    <td>@emp.HireDate?.ToString(ActiveCulture)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Employee[]? CurrentPage;
    private CultureInfo ActiveCulture = CultureInfo.CurrentCulture;

    private static readonly string[] FieldNames = { "last_name", "first_name", "title", "title_courtesy", "birth_date", "hire_date" };
    public List<string> SortParameter; 

    /// <summary>
    /// <list type="number">
    ///     <item>SortName is null or empty - no sort</item>
    ///     <item>SortName starts with "n" - no sort</item>
    ///     <item>SortName starts with "a" - sort ascending; name of sorting field starts from SortName[2]</item>
    ///     <item>SortName starts with "d" - sort descending; name of sorting field starts from SortName[2]</item>
    /// </list>
    /// </summary>
    [Parameter]
    public string? SortName { get; set; }

    protected override void OnInitialized()
    {
        //        ActiveCulture = new CultureInfo("lt-LT");   // Yne can set to any another value. You 
        //        string activeCultureStr = Configuration.ActiveCulture ?? "en-US";
        //        ActiveCulture = new CultureInfo(activeCultureStr);
        // string activeCultureStr = AppConfiguration?.Value?.ActiveCulture ?? "en-US";

        string activeCultureStr = Configuration == null ? "en-US" : (Configuration["AppSettings:ActiveCulture"] ?? "en-US");
        ActiveCulture = new CultureInfo(activeCultureStr);
    }

    protected override async Task OnParametersSetAsync()
    {
        SortParameter = new List<string>();
        var page = dbSVC.GetAllEntities();

        if (String.IsNullOrEmpty(SortName))
        {
            ResetSort();
            CurrentPage = await page.ToArrayAsync();
        } 
        else
        {
            Tuple<string, string> sortDefinition = SetSort(SortName);
            for (int i = 0; i < FieldNames.Length; i++)
            {
                if (FieldNames[i] != sortDefinition.Item2)
                {
                    SortParameter.Add($"n_{FieldNames[i]}");
                }
                else
                {
                    string sortPrefix = sortDefinition.Item1.StartsWith("a") ? "d" : "a";   // d or n <-- > a
                    SortParameter.Add($"{sortPrefix}_{FieldNames[i]}");
                }
            }
            CurrentPage = await page.ToArrayAsync();    // TODO
        }

    }

    private void ResetSort()
    {
        for (int i = 0; i < FieldNames.Length; i++)
        {
            SortParameter.Add($"n_{FieldNames[i]}");
        }
    }

    private Tuple<string, string> SetSort(string sortParameter)
    {
        string sortDirection = sortParameter.Substring(0, 1);
        string sortName = sortParameter.Substring(2);
        return new Tuple<string, string>(sortDirection, sortName);
    }

    // https://learn.microsoft.com/en-us/aspnet/core/blazor/blazor-ef-core?view=aspnetcore-5.0#new-dbcontext-instances-5x
}
