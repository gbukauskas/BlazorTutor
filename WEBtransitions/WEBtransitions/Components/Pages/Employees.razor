@page "/Employees/{action?}/{argument?}/{pagenumber:int?}/{errormessage?}"

@*
  Parameter action defines type of parameters:
    <list type="bullet">
        <item><code>sort</code> - sort parameters</item>
        <item><code>page</code> - parameters for pager</item>
        <item><code>none<code> - start page, no parameters</item>
    </list>
  Parameter argument contains:
    <list type="bullet">
        <item>Sort definition when <code>action == 'sort'</code></item>
        <item>Page size when <code>action == 'page'</code> </item>
    </list>
*@

@using System.Globalization
@using System.Diagnostics
@using WEBtransitions.ClassLibraryDatabase.CustomPager
@using WEBtransitions.Components.CrudLinks

@using WEBtransitions.Services
@using WEBtransitions.Services.Interfaces

@attribute [StreamRendering(true)]

@inject EmployeeSvc dbSVC
@inject IConfiguration Configuration
@inject NavigationManager NavManager
@* @inject IStateData state *@
@inject StateSvc StateManager

@implements IAsyncDisposable

<PageTitle>Employees</PageTitle>

@if (currentPage == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table reportTable" name="list-of-employees">
        <caption>Employees</caption>
        <thead>
            <tr>
                <th>&nbsp;</th>
                <th name="LastName" data-sort="@SortParameter![0].Substring(0, 1)">
                    <a href="/Employees/sort/@SortParameter[0]">Last name</a>
                </th>
                <th name="FirstName" data-sort="@SortParameter[1].Substring(0, 1)">
                    <a href="/Employees/sort/@SortParameter[1]">First name</a>
                </th>
                <th name="Title" data-sort="@SortParameter[2].Substring(0, 1)">
                    <a href="/Employees/sort/@SortParameter[2]">Title</a>
                </th>
                <th name="TitleOfCourtesy" data-sort="@SortParameter[3].Substring(0, 1)">
                    <a href="/Employees/sort/@SortParameter[3]">Title of Courtesy</a>
                </th>
                <th name="BirthDate" data-sort="@SortParameter[4].Substring(0, 1)">
                    <a href="/Employees/sort/@SortParameter[4]">Birth date</a>
                </th>
                <th name="HireDate" data-sort="@SortParameter[5].Substring(0, 1)">
                    <a href="/Employees/sort/@SortParameter[5]">Hire date</a>
                </th>
                <th>Command</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in currentPage.Items)
            {
                <tr @key=emp.ItemKey class="@GetBoldClass(emp.ItemKey)">
                    <td>
                        <img src="@emp.PhotoUrl" />
                    </td>
                    <td>@emp.LastName</td>
                    <td>@emp.FirstName</td>
                    <td>@emp.Title</td>
                    <td>@emp.TitleOfCourtesy</td>
                    <td>@emp.BirthDate?.ToString(ActiveCulture)</td>
                    <td>@emp.HireDate?.ToString(ActiveCulture)</td>
                    <td>
                        <CrudLinksControl Url="/EditEmployee" Id="@emp.ItemKey" />
                    </td>
                </tr>
            }
        </tbody>
        @if (!String.IsNullOrEmpty(DBerrorMessage))
        {
            <tfoot>
                <tr>
                    <td colspan="10">
                        <span class="text-danger">@DBerrorMessage</span>
                    </td>
                </tr>
            </tfoot>
        }
    </table>

    <div class="component-footer">
        <CascadingValue Name="ActiveCulture" Value="@ActiveCulture">
        <CascadingValue Name="PageState" Value="@currentState">
            <PagerControl MaxButtons=@buttonCount PageCount=@currentPage.TotalPages TotalRecords=@currentPage.TotalRecords.ToString()
                          PageNumber=@currentPage.PageNumber PageSize="@currentPage.PageSize" BaseUrl="Employees/page" ErrorMessage="@ErrorMessage" />
            <a href="/EditEmployee/new" class="new-item-link" title="Insert new employee">New Employee</a>
            <FilterControl T="Employee" OnFilterChanged="FilterChangedHandler"></FilterControl>
        </CascadingValue>
        </CascadingValue>
    </div>

}

@code {

    // [CascadingParameter(Name = "StateData")]
    // public IStateData? state { get; set; }

    private CultureInfo ActiveCulture = CultureInfo.CurrentCulture;
    private static readonly string[] FieldNames = { "LastName", "FirstName", "Title", "TitleOfCourtesy", "BirthDate", "HireDate" };
    public List<string>? SortParameter; 

    /// <summary>
    /// Action in the current page: read comments at beginnig of the file
    /// </summary>
    [Parameter]
    public string? Action { get; set; } = null;

    /// <summary>
    /// Page size or Sort definition
    /// </summary>
    [Parameter]
    public string? Argument { get; set; } = null;

    /// <summary>
    /// Current page
    /// </summary>
    [Parameter]
    public int? PageNumber { get; set; } = null;


    /// <summary>
    /// Error message
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; } = "";

    [SupplyParameterFromQuery(Name = "db_error")]
    public string? DBerrorMessage { get; set; } = null;

    [SupplyParameterFromQuery(Name = "new_id")]
    public string LastInsertedId { get; set; } = "-1";

    [CascadingParameter(Name = "StateKey")]
    public AppStateKey? StateKey { get; set; }

    /*    
    /// <summary>
    /// Number of rows in the page
    /// </summary>
    internal int? PageSize { get; set; } = null;

*/

    private int defaultPageSize;
    private int buttonCount;
    private PgResponse<Employee>? currentPage = null;

    /// <summary>
    /// Cascading parameter
    /// </summary>
    private StateForComponent? currentState = null;
    private AppStateKey? stateId;

    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(1000);  // For debugging (stream rendering mode)

        string activeCultureStr = Configuration == null ? "en-US" : (Configuration["AppSettings:ActiveCulture"] ?? "en-US");
        this.defaultPageSize = dbSVC.GetDefaultPageSize(Configuration, "Employees");
        this.buttonCount = dbSVC.GetPGButtonCount(Configuration, "Employees");

        Debug.Assert(StateKey != null && !String.IsNullOrEmpty(StateKey.AppName) && !String.IsNullOrEmpty(StateKey.UserId));
        stateId = new AppStateKey(StateKey.AppName, StateKey.UserId, "Employees");
        AppState? stateData = await StateManager.GetEntityByIdAsync(stateId);
        if (stateData == null)
        {
            stateData = await CreateNewState(stateId);
        }
        currentState = (StateForComponent)stateData;
        if (String.IsNullOrEmpty(currentState.FilterState.Item2))
        {
            currentState.FilterState = new Tuple<string, string, bool>("", "", false);
        }

        SortParameter = new List<string>();
        for (int i = 0; i < FieldNames.Length; i++)
        {
            SortParameter.Add($"n_{FieldNames[i]}");
        }

        ActiveCulture = new CultureInfo(activeCultureStr);
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        // this.currentState = state.GetState("Employees", buttonCount, this.defaultPageSize);

        if (!String.IsNullOrEmpty(Argument))
        {
            if (Action == "sort")
            {
                Tuple<string?, string> newSort = dbSVC.SetSort(Argument, true);
                this.currentState!.SortState = $"{newSort.Item1}_{newSort.Item2}";
            }
            else if (Action == "page")
            {
                this.currentState!.PreparePaging(this.Argument, NavManager, "Employees", PageNumber ?? 1);
            }
            else
            {
                throw new Exception($"Action '{Action}' is invalid.");
            }
        }
        if (!String.IsNullOrEmpty(this.LastInsertedId))
        {
            this.currentState!.LastInsertedId = this.LastInsertedId;
        }

        if (String.IsNullOrEmpty(Action))
        {
            this.Action = "page";
        }
        SortParameter = dbSVC.ProcessCurrentPage(this.currentState!, FieldNames);
        currentPage = await dbSVC.GetCurrentPageAsync(this.currentState!);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        this.LastInsertedId = "-1";
    }

    private string GetBoldClass(string employeeId)
    {
        if (String.IsNullOrEmpty(this.LastInsertedId) || this.LastInsertedId != employeeId)
        {
            return "fw-normal";
        }
        else
        {
            return "fw-bold";
        }
    }

    public async ValueTask DisposeAsync()
    {
        Debug.Assert(this.currentState != null);
        var x = (AppState)this.currentState;
        await this.StateManager.UpdateEntity(x, false);
    }

    void FilterChangedHandler(Tuple<string, string, bool> message)
    {
        Debug.Assert(this.currentState != null);
        this.currentState.FilterState = message;
        NavManager.NavigateTo($"/{this.currentState.ComponentName}", true);  // Refresh this page
    }

    private async Task<AppState> CreateNewState(AppStateKey stateId)
    {
        Debug.Assert(!String.IsNullOrEmpty(stateId.AppName) && !String.IsNullOrEmpty(stateId.UserId) && !String.IsNullOrEmpty(stateId.ComponentName));
        var newState = new AppState()
        {
            AppName = stateId.AppName,
            UserId = stateId.UserId,
            ComponentName = stateId.ComponentName,
            SortState = "",
            FilterFieldName = "",
            FilterFieldValue = "",
            FilterIsDateValue = (short)0,
            PagerButtonCount = this.buttonCount,
            PagerRowCount = 0,      // The application will set actual value after reading dbo.Customers table
            PagerPageCount = 0,     // The application will set actual value after reading dbo.Customers table
            PagerPageNumber = 0,    // Display all records without paging
            PagerPageSize = this.defaultPageSize,
            PagerBaseUrl = "Employees",
            IsDeleted = (byte)0,
            LastInsertedId = "-1"   // The application has no information about insertion
        };
        return await StateManager.CreateEntity(newState);
    }

    // https://learn.microsoft.com/en-us/aspnet/core/blazor/blazor-ef-core?view=aspnetcore-5.0#new-dbcontext-instances-5x
}
