@page "/Customers/{action?}/{argument?}/{pagenumber:int?}/{errormessage?}"

@*
  Parameter action defines type of parameters:
    <list type="bullet">
        <item><code>sort</code> - sort parameters</item>
        <item><code>page</code> - parameters for pager</item>
        <item><code>filter</code> - filtering</item>
        <item><code>none<code> - start page, no parameters</item>
    </list>
  Parameter argument contains:
    <list type="bullet">
        <item>Sort definition when <code>action == 'sort'</<code></item>
        <item>Page size when <code>action == 'page'</<code> </item>
        <item>Word search when <code>action == 'page'</<code> </item>
    </list>
*@

@using System.Globalization
@using System.Reflection
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Data.Sqlite
@using Microsoft.EntityFrameworkCore
@using System.Diagnostics
@using System.Text
@using WEBtransitions.ClassLibraryDatabase.CustomPager
@using WEBtransitions.Components.CrudLinks

@using WEBtransitions.Services
@using WEBtransitions.Services.Interfaces

@attribute [StreamRendering(true)]

@inject CustomerSvc dbSVC
@inject IConfiguration Configuration
@inject NavigationManager NavManager
@inject IStateData state

<PageTitle>Customers</PageTitle>

@if (currentPage == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table reportTable" name="list-of-Customers">
        <caption>Customers</caption>
        <thead>
            <tr>
                <th name="CompanyName" data-sort="@SortParameter![0].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[0]">Company name</a>
                </th>
                <th name="ContactName" data-sort="@SortParameter[1].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[1]">Contact name</a>
                </th>
                <th name="ContactTitle" data-sort="@SortParameter[2].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[2]">Contact Title</a>
                </th>
                <th name="Address" data-sort="@SortParameter[3].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[3]">Address</a>
                </th>
                <th name="City" data-sort="@SortParameter[4].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[4]">City</a>
                </th>
                <th name="Region" data-sort="@SortParameter[5].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[5]">Region</a>
                </th>
                <th name="PostalCode" data-sort="@SortParameter[6].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[6]">Postal Code</a>
                </th>
                <th name="Country" data-sort="@SortParameter[7].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[7]">Country</a>
                </th>
                <th>Command</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var cust in currentPage.Items)
            {
                <tr @key=cust.CustomerId>
                    <td>@cust.CompanyName</td>
                    <td>@cust.ContactName</td>
                    <td>@cust.ContactTitle</td>
                    <td>@cust.Address</td>
                    <td>@cust.City</td>
                    <td>@cust.Region</td>
                    <td>@cust.PostalCode</td>
                    <td>@cust.Country</td>
                    <td>
                        <CrudLinksControl Url="/EditCustomer" Id="@cust.CustomerId" />
                    </td>
                </tr>
            }
        </tbody>
        @if (!String.IsNullOrEmpty(DBerrorMessage))
        {
            <tfoot>
                <tr>
                    <td colspan="10">
                        <span class="text-danger">@DBerrorMessage</span>
                    </td>
                </tr>
            </tfoot>
        }
    </table>

    <div class="component-footer">
        <PagerControl MaxButtons=@buttonCount PageCount=@currentPage.TotalPages TotalRecords=@currentPage.TotalRecords.ToString()
                      PageNumber=@currentPage.PageNumber PageSize="@currentPage.PageSize" BaseUrl="Customers/page" ErrorMessage="@ErrorMessage" />
        <a href="/EditCustomer/new" class="new-item-link" title="Insert new customer">New Customer</a>
        <FilterControl T="Customer" BaseUrl="Customers" FilterName="@currentState?.FilterState?.Item1" FilterValue="@currentState?.FilterState?.Item2"></FilterControl>
    </div>

}

@code {
    private CultureInfo ActiveCulture = CultureInfo.CurrentCulture;
    private static readonly string[] FieldNames = { "CompanyName", "ContactName", "ContactTitle", "Address", "City", "Region", "PostalCode", "Country" };
    public List<string>? SortParameter;
    //    private string? ConnectionString = null;

    /// <summary>
    /// Action in the current page: read comments at beginnig of the file
    /// </summary>
    [Parameter]
    public string? Action { get; set; } = null;

    /// <summary>
    /// Page size or Sort definition
    /// </summary>
    [Parameter]
    public string? Argument { get; set; } = null;

    /// <summary>
    /// Current page
    /// </summary>
    [Parameter]
    public int? PageNumber { get; set; } = null;


    /// <summary>
    /// Error message
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; } = "";

    [SupplyParameterFromQuery(Name = "db_error")]
    public string? DBerrorMessage { get; set; } = null;

    /// <summary>
    /// Number of rows in the page
    /// </summary>
    internal int? PageSize { get; set; } = null;

    /// <summary>
    /// Sort definition
    /// </summary>
    // internal string? SortDefinition { get; set; } = null;   // ??

    //    private int pageNumber;
    private int defaultPageSize;
    private int buttonCount;
    private PgResponse<Customer>? currentPage = null;
    private StateForComponent? currentState = null;

    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(1000);  // Test for stream rendering

        SortParameter = new List<string>();
        for (int i = 0; i < FieldNames.Length; i++)
        {
            SortParameter.Add($"n_{FieldNames[i]}");
        }

        string activeCultureStr = Configuration == null ? "en-US" : (Configuration["AppSettings:ActiveCulture"] ?? "en-US");
        string defaultPageSizeStr = Configuration == null ? "9" : (Configuration["AppSettings:defaultPgSize"] ?? "9");
        if (!int.TryParse(defaultPageSizeStr, out this.defaultPageSize))
        {
            this.defaultPageSize = 9;
        }
        string maxButtonsStr = Configuration == null ? "10" : (Configuration["AppSettings:maxButtons"] ?? "10");
        if (!int.TryParse(maxButtonsStr, out this.buttonCount))
        {
            this.buttonCount = 10;
        }

        ActiveCulture = new CultureInfo(activeCultureStr);
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Read state and parameters 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        this.currentState = state.GetState("Customers", buttonCount, this.defaultPageSize);

        if (!String.IsNullOrEmpty(Argument))
        {
            if (Action == "sort")
            {
                //                SortDefinition = Argument;  // ??
                Tuple<string?, string> newSort = dbSVC.SetSort(Argument, true);
                this.currentState.SortState = $"{newSort.Item1}_{newSort.Item2}";
            }
            else if (Action == "page")
            {
                PreparePaging();
            }
            else if (Action == "filter")
            {
                PrepareFiltering();
            }
        }

        if (String.IsNullOrEmpty(Action))
        {
            this.Action = "page";
        }
        ProcessCurrentPage();

//        Debug.Assert(!String.IsNullOrEmpty(this.ConnectionString));
        // currentPage = dbSVC.GetCurrentPage_ADO(this.currentState, this.ConnectionString);
        currentPage = await dbSVC.GetCurrentPageAsync(this.currentState);

        state.SetState(this.currentState);
    }

    /// <summary>
    /// Set values in the <code>this.currentState.FilterState</code>
    /// </summary>
    private void PrepareFiltering()
    {
        Debug.Assert(this.currentState != null);
        string fieldName = string.Empty;
        string searchValue = string.Empty;

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("field-name", out var _fieldName))
        {
            fieldName = Convert.ToString(_fieldName);
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search-value", out var _searchValue))
        {
            searchValue = Convert.ToString(_searchValue);
        }
        this.currentState.FilterState = Tuple.Create(fieldName, searchValue);
    }

    /// <summary>
    /// Set values in the <code>this.currentState.PagerState</code>
    /// </summary>
    private void PreparePaging()
    {
        Debug.Assert(this.currentState != null);
        int pageSize;

        if (int.TryParse(Argument, out pageSize))
        {
            this.PageSize = pageSize;
        }
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("current-page", out var _initialCount))
        {
            this.PageNumber = Convert.ToInt32(_initialCount);
        }
        if (this.currentState.PagerState == null)
        {
            this.currentState.PagerState = new PgPostData("PagerNavigate", this.buttonCount);
        }
        this.currentState.PagerState.PageNumber = this.PageNumber ?? 1;
        this.currentState.PagerState.PageSize = this.PageSize ?? this.defaultPageSize;
        this.currentState.PagerState.BaseUrl = "Customers/page";
    }

    /// <summary>
    /// Fills list SortParameter with correct values for every field
    /// </summary>
    private void ProcessCurrentPage()
    {
        Debug.Assert(this.currentState != null);
        Tuple<string?, string> sortDefinition = dbSVC.SetSort(this.currentState.SortState, false);
        if (!String.IsNullOrEmpty(sortDefinition.Item1))
        {
            SortParameter = new List<string>();
            for (int i = 0; i < FieldNames.Length; i++)
            {
                if (FieldNames[i] == sortDefinition.Item2)
                {
                    SortParameter.Add($"{sortDefinition.Item1}_{sortDefinition.Item2}");
                }
                else
                {
                    SortParameter.Add($"n_{FieldNames[i]}");
                }
            }
        }
    }

    // private void EditCustomer(string id)
    // {
    //     NavManager.NavigateTo($"/EditCustomer/edit/{id}");
    // }
}
