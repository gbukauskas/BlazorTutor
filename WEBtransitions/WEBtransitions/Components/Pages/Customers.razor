@page "/Customers/{action?}/{argument?}/{pagenumber:int?}/{errormessage?}"

@*
  Parameter action defines type of parameters:
    <list type="bullet">
        <item><code>sort</code> - sort parameters</item>
        <item><code>page</code> - parameters for pager</item>
        <item><code>filter</code> - filtering</item>
        <item><code>none<code> - start page, no parameters</item>
    </list>
  Parameter argument contains:
    <list type="bullet">
        <item>Sort definition when <code>action == 'sort'</<code></item>
        <item>Page size when <code>action == 'page'</<code> </item>
        <item>Word search when <code>action == 'page'</<code> </item>
    </list>
*@

@using System.Globalization
@using System.Reflection
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Data.Sqlite
@using Microsoft.EntityFrameworkCore
@using System.Diagnostics
@using System.Text
@using WEBtransitions.ClassLibraryDatabase.CustomPager
@using WEBtransitions.Services
@using WEBtransitions.Services.Interfaces

@attribute [StreamRendering(true)]

@inject CustomerSvc dbSVC
@inject IConfiguration Configuration
@inject NavigationManager NavManager
@inject IStateData state

<PageTitle>Customers</PageTitle>

@if (currentPage == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table reportTable" name="list-of-Customers">
        <caption>Customers</caption>
        <thead>
            <tr>
                <th name="CompanyName" data-sort="@SortParameter[0].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[0]">Company name</a>
                </th>
                <th name="ContactName" data-sort="@SortParameter[1].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[1]">Contact name</a>
                </th>
                <th name="ContactTitle" data-sort="@SortParameter[2].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[2]">Contact Title</a>
                </th>
                <th name="Address" data-sort="@SortParameter[3].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[3]">Address</a>
                </th>
                <th name="City" data-sort="@SortParameter[4].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[4]">City</a>
                </th>
                <th name="Region" data-sort="@SortParameter[5].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[5]">Region</a>
                </th>
                <th name="PostalCode" data-sort="@SortParameter[6].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[6]">Postal Code</a>
                </th>
                <th name="Country" data-sort="@SortParameter[7].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[7]">Country</a>
                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var cust in currentPage.Items)
            {
                <tr>
                    <td>@cust.CompanyName</td>
                    <td>@cust.ContactName</td>
                    <td>@cust.ContactTitle</td>
                    <td>@cust.Address</td>
                    <td>@cust.City</td>
                    <td>@cust.Region</td>
                    <td>@cust.PostalCode</td>
                    <td>@cust.Country</td>
                </tr>
            }
        </tbody>
    </table>

    <PagerControl MaxButtons=@buttonCount PageCount=@currentPage.TotalPages TotalRecords=@currentPage.TotalRecords.ToString() PageNumber=@currentPage.PageNumber
    PageSize="@currentPage.PageSize" BaseUrl="Customers/page" ErrorMessage="@ErrorMessage"/>

    <FilterControl T="Customer" BaseUrl="Customers" FilterName="@currentState?.FilterState?.Item1" FilterValue="@currentState?.FilterState?.Item2"></FilterControl>

}

@code {
    private CultureInfo ActiveCulture = CultureInfo.CurrentCulture;
    private static readonly string[] FieldNames = { "CompanyName", "ContactName", "ContactTitle", "Address", "City", "Region", "PostalCode", "Country" };
    public List<string>? SortParameter;
    private string? ConnectionString = null;

    /// <summary>
    /// Current page
    /// </summary>
    [Parameter]
    public string? Action { get; set; } = null;

    /// <summary>
    /// Page size or Sort definition
    /// </summary>
    [Parameter]
    public string? Argument { get; set; } = null;

    /// <summary>
    /// Current page
    /// </summary>
    [Parameter]
    public int? PageNumber { get; set; } = null;


    /// <summary>
    /// Error message
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; } = "";

    /// <summary>
    /// Number of rows in the page
    /// </summary>
    internal int? PageSize { get; set; } = null;

    /// <summary>
    /// Sort definition
    /// </summary>
    // internal string? SortDefinition { get; set; } = null;   // ??

    private int pageNumber;
    private int defaultPageSize;
    private int buttonCount;
    private PgResponse<Customer>? currentPage = null;
    private StateForComponent? currentState = null;

    protected override async Task OnInitializedAsync()
    {
        //        await Task.Delay(1000);  // Test for stream rendering
        ConnectionString = Configuration.GetConnectionString("DefaultConnection");

        SortParameter = new List<string>();
        for (int i = 0; i < FieldNames.Length; i++)
        {
            SortParameter.Add($"n_{FieldNames[i]}");
        }

        string activeCultureStr = Configuration == null ? "en-US" : (Configuration["AppSettings:ActiveCulture"] ?? "en-US");
        string defaultPageSizeStr = Configuration == null ? "9" : (Configuration["AppSettings:defaultPgSize"] ?? "9");
        if (!int.TryParse(defaultPageSizeStr, out this.defaultPageSize))
        {
            this.defaultPageSize = 9;
        }
        string maxButtonsStr = Configuration == null ? "10" : (Configuration["AppSettings:maxButtons"] ?? "10");
        if (!int.TryParse(maxButtonsStr, out this.buttonCount))
        {
            this.buttonCount = 10;
        }

        ActiveCulture = new CultureInfo(activeCultureStr);
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Read state and parameters 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        this.currentState = state.GetState("Customers", buttonCount, this.defaultPageSize);

        if (!String.IsNullOrEmpty(Argument))
        {
            if (Action == "sort")
            {
                //                SortDefinition = Argument;  // ??
                Tuple<string?, string> newSort = SetSort(Argument, true);
                this.currentState.SortState = $"{newSort.Item1}_{newSort.Item2}";
            }
            else if (Action == "page")
            {
                PreparePaging();
            }
            else if (Action == "filter")
            {
                PrepareFiltering();
            }
        }

        if (String.IsNullOrEmpty(Action))
        {
            this.Action = "page";
        }

        string query = PrepareSQL(this.currentState);   // Sort and Filtering are ready.
#pragma warning disable CS8604

        using (SqliteConnection conn = new SqliteConnection(ConnectionString))
        {
            conn.Open();
            PreparePageValues(conn, query, this.currentState.PagerState);
            ProcessCurrentPage();

            using (SqliteCommand readCommand = new SqliteCommand(query, conn))
            using (SqliteDataReader rdr = readCommand.ExecuteReader())
            {
                var allCustomers = Customer.LoadFromDB(rdr)
                                    .Skip((this.currentState.PagerState.PageNumber - 1) * this.currentState.PagerState.PageSize)
                                    .Take(this.currentState.PagerState.PageSize)
                                    .ToArray();
                currentPage = new PgResponse<Customer>()
                {
                    TotalRecords = this.currentState.PagerState.RowCount,
                    TotalPages = this.currentState.PagerState.PageCount,
                    PageSize = this.currentState.PagerState.PageSize,
                    PageNumber = this.currentState.PagerState.PageNumber,
                    Items = allCustomers
                };
            }
            conn.Close();
        }


#pragma warning restore CS8604

//        await ProcessCurrentPage();
        state.SetState(this.currentState);
    }

    private void PreparePageValues(SqliteConnection conn, string query, PgPostData pagerData)
    {
        using (SqliteCommand command = new SqliteCommand(query.Replace("*", "COUNT(1)"), conn))
        {
            var rowCountObject = command.ExecuteScalar();
            long rowCont = (long)(rowCountObject == null ? 0L : rowCountObject);
            pagerData.RowCount = (int)rowCont;

            int pgCount = pagerData.RowCount / pagerData.PageSize;
            if (pagerData.RowCount % pagerData.PageSize > 0)
            {
                pgCount += 1;
            }
            pagerData.PageCount = pgCount;

            if (pagerData.PageNumber * pagerData.PageSize >= rowCont)
            {
                pagerData.PageNumber = 1;
            }
        }
    }

    /// <summary>
    /// Builds SQL statement
    /// </summary>
    /// <param name="currentState">Current state</param>
    /// <returns>SQL query without paging</returns>
    private string PrepareSQL(StateForComponent currentState)
    {
        Debug.Assert(currentState != null);
        StringBuilder bld = new StringBuilder("SELECT * FROM Customers ");
        if (currentState.FilterState != null && !String.IsNullOrEmpty(currentState.FilterState.Item2))
        {
            bld.AppendLine($"WHERE {currentState.FilterState.Item1} LIKE '%{currentState.FilterState.Item2}%' ");
        }
        if (!String.IsNullOrEmpty(currentState.SortState) && !currentState.SortState.StartsWith("n"))
        {
            Tuple<string?, string> sortDefinition = SetSort(currentState.SortState, false);
            string sortSuffic = sortDefinition.Item1 == "a" ? "ASC" : "DESC";
            bld.AppendLine($"ORDER BY {sortDefinition.Item2} {sortSuffic} ");
        }

        return bld.ToString();
    }

    /// <summary>
    /// Set values in the <code>this.currentState.FilterState</code>
    /// </summary>
    private void PrepareFiltering()
    {
        Debug.Assert(this.currentState != null);
        string fieldName = string.Empty;
        string searchValue = string.Empty;

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("field-name", out var _fieldName))
        {
            fieldName = Convert.ToString(_fieldName);
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search-value", out var _searchValue))
        {
            searchValue = Convert.ToString(_searchValue);
        }
        this.currentState.FilterState = Tuple.Create(fieldName, searchValue);
    }

    /// <summary>
    /// Set values in the <code>this.currentState.PagerState</code>
    /// </summary>
    private void PreparePaging()
    {
        Debug.Assert(this.currentState != null);
        int pageSize;

        if (int.TryParse(Argument, out pageSize))
        {
            this.PageSize = pageSize;
        }
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("current-page", out var _initialCount))
        {
            this.PageNumber = Convert.ToInt32(_initialCount);
        }
        if (this.currentState.PagerState == null)
        {
            this.currentState.PagerState = new PgPostData("PagerNavigate", this.buttonCount);
        }
        this.currentState.PagerState.PageNumber = this.PageNumber ?? 1;
        this.currentState.PagerState.PageSize = this.PageSize ?? this.defaultPageSize;
        this.currentState.PagerState.BaseUrl = "Customers/page";
    }

    // private async Task ProcessCurrentPage(string? sortDefitionOriginal = null)
    private void ProcessCurrentPage()
    {
        Debug.Assert(this.currentState != null);
        Tuple<string?, string> sortDefinition = SetSort(this.currentState.SortState, false);
        if (!String.IsNullOrEmpty(sortDefinition.Item1))
        {
            SortParameter = new List<string>();
            for (int i = 0; i < FieldNames.Length; i++)
            {
                if (FieldNames[i] == sortDefinition.Item2)
                {
                    SortParameter.Add($"{sortDefinition.Item1}_{sortDefinition.Item2}");
                }
                else
                {
                    SortParameter.Add($"n_{FieldNames[i]}");
                }
            }
        }
/*
#pragma warning disable CS8602
        if (!this.PageNumber.HasValue && this.currentState.PagerState != null)
        {
            this.PageNumber = this.currentState.PagerState.PageNumber;
        }
        this.pageNumber = this.PageNumber ?? 1;

        var tmp = dbSVC.GetAllEntities();
        if (sortDefinition.Item1 != null && (sortDefinition.Item1 == "a" || sortDefinition.Item1 == "d"))
        {
            IEnumerable<Customer>? tmpList = SortThePage(sortDefinition, tmp);
            this.currentState.SortState = $"{sortDefinition.Item1}_{sortDefinition.Item2}";
            currentPage = await dbSVC.GetPageAsync(tmpList, this.currentState.PagerState.PageSize, this.currentState.PagerState.PageNumber);
        }
        else
        {
            currentPage = await dbSVC.GetPageAsync(tmp, this.currentState.PagerState.PageSize, this.currentState.PagerState.PageNumber);
        }
        this.currentState.PagerState.PageCount = currentPage.TotalPages;
#pragma warning restore CS8602
*/
    }

    /// <summary>
    /// <list type="number">
    ///     <item>sortDefinionOriginal is null or empty - no sort</item>
    ///     <item>sortDefinionOriginal starts with "n" - no sort</item>
    ///     <item>sortDefinionOriginal starts with "a" - sort ascending; name of sorting field starts from SortName[2]</item>
    ///     <item>sortDefinionOriginal starts with "d" - sort descending; name of sorting field starts from SortName[2]</item>
    /// </list>
    /// </summary>
    private Tuple<string?, string> SetSort(string? sortParameter, bool setNextState)
    {
        string sortDirection;
        if (String.IsNullOrEmpty(sortParameter))
        {
            return new Tuple<string?, string>(null, "");
        }

        if (setNextState)
        {
            switch (sortParameter.Substring(0, 1))
            {
                case "n":
                    sortDirection = "a";
                    break;
                case "a":
                    sortDirection = "d";
                    break;
                default:
                    sortDirection = "n";
                    break;
            }
        }
        else
        {
            sortDirection = sortParameter.Substring(0, 1);
        }
        string sortName = sortParameter.Substring(2);
        return new Tuple<string?, string>(sortDirection, sortName);
    }

    private IEnumerable<Customer>? SortThePage(Tuple<string?, string> sortDefinition, IQueryable<Customer>? tmp)
    {
        if (String.IsNullOrEmpty(sortDefinition.Item1) || tmp == null)
        {
            return tmp;
        }
        Debug.Assert(sortDefinition.Item1 != null && (sortDefinition.Item1 == "a" || sortDefinition.Item1 == "d"));

        // a --> ascending, d --> descending
#pragma warning disable CS8600
        PropertyInfo propInfo = typeof(Customer).GetProperty(sortDefinition.Item2, BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance);
#pragma warning restore CS8600
        if (propInfo == null)
        {
            return tmp.AsEnumerable();    // Invalid name of the field: no sorting
        }
        else
        {
            IEnumerable<Customer> tmpList = tmp.AsEnumerable();
            return sortDefinition.Item1.StartsWith("a")
                        ? tmpList.OrderBy(e => propInfo.GetValue(e))
                        : tmpList.OrderByDescending(e => propInfo.GetValue(e));
        }
    }

}
