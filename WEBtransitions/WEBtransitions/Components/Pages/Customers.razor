@page "/Customers/{action?}/{argument?}/{pagenumber:int?}/{errormessage?}"

@*
  Parameter action defines type of parameters:
    <list type="bullet">
        <item><code>sort</code> - sort parameters</item>
        <item><code>page</code> - parameters for pager</item>
        <item><code>none<code> - start page, no parameters</item>
    </list>
  Parameter argument contains:
    <list type="bullet">
        <item>Sort definition when <code>action == 'sort'</<code></item>
        <item>Page size when <code>action == 'page'</<code> </item>
        <item>Word search when <code>action == 'page'</<code> </item>
    </list>
*@

@using System.Globalization
@using System.Diagnostics
@using WEBtransitions.ClassLibraryDatabase.CustomPager
@using WEBtransitions.Components.CrudLinks

@using WEBtransitions.Services
@using WEBtransitions.Services.Interfaces

@attribute [StreamRendering(true)]

@inject CustomerSvc dbSVC
@inject IConfiguration Configuration
@inject NavigationManager NavManager
@inject StateSvc StateManager
@* @inject IJSRuntime JsRuntime; *@
@inject CookieService cookieService

@implements IAsyncDisposable

<PageTitle>Customers</PageTitle>

@if (currentPage == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table reportTable" name="list-of-Customers">
        <caption>Customers</caption>
        <thead>
            <tr>
                <th name="CompanyName" data-sort="@SortParameter![0].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[0]">Company name</a>
                </th>
                <th name="ContactName" data-sort="@SortParameter[1].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[1]">Contact name</a>
                </th>
                <th name="ContactTitle" data-sort="@SortParameter[2].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[2]">Contact Title</a>
                </th>
                <th name="Address" data-sort="@SortParameter[3].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[3]">Address</a>
                </th>
                <th name="City" data-sort="@SortParameter[4].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[4]">City</a>
                </th>
                <th name="Region" data-sort="@SortParameter[5].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[5]">Region</a>
                </th>
                <th name="PostalCode" data-sort="@SortParameter[6].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[6]">Postal Code</a>
                </th>
                <th name="Country" data-sort="@SortParameter[7].Substring(0, 1)">
                    <a href="/Customers/sort/@SortParameter[7]">Country</a>
                </th>
                <th>Command</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var cust in currentPage.Items)
            {
                <tr @key=cust.CustomerId class="@GetBoldClass(cust.CustomerId)" >
                    <td>@cust.CompanyName</td>
                    <td>@cust.ContactName</td>
                    <td>@cust.ContactTitle</td>
                    <td>@cust.Address</td>
                    <td>@cust.City</td>
                    <td>@cust.Region</td>
                    <td>@cust.PostalCode</td>
                    <td>@cust.Country</td>
                    <td>
                        <CrudLinksControl Url="/EditCustomer" Id="@cust.CustomerId" />
                    </td>
                </tr>
            }
        </tbody>
        @if (!String.IsNullOrEmpty(DBerrorMessage))
        {
            <tfoot>
                <tr>
                    <td colspan="10">
                        <span class="text-danger">@DBerrorMessage</span>
                    </td>
                </tr>
            </tfoot>
        }
    </table>

    <div class="component-footer">
        <CascadingValue Name="ActiveCulture" Value="@ActiveCulture">
            <CascadingValue Name="PageState" Value="@currentState">
            <PagerControl MaxButtons=@buttonCount PageCount=@currentPage.TotalPages TotalRecords=@currentPage.TotalRecords.ToString()
                          PageNumber=@currentPage.PageNumber PageSize="@currentPage.PageSize" BaseUrl="Customers/page" ErrorMessage="@ErrorMessage" />
            <a href="/EditCustomer/new" class="new-item-link" title="Insert new customer">New Customer</a>
            <FilterControl T="Customer" OnFilterChanged="FilterChangedHandler"></FilterControl>
        </CascadingValue>
        </CascadingValue>
    </div>

}

@code {
    private CultureInfo ActiveCulture = CultureInfo.CurrentCulture;
    private static readonly string[] FieldNames = { "CompanyName", "ContactName", "ContactTitle", "Address", "City", "Region", "PostalCode", "Country" };
    public List<string>? SortParameter;

    /// <summary>
    /// Action in the current page: read comments at beginnig of the file
    /// </summary>
    [Parameter]
    public string? Action { get; set; } = null;

    /// <summary>
    /// Page size or Sort definition
    /// </summary>
    [Parameter]
    public string? Argument { get; set; } = null;

    /// <summary>
    /// Current page
    /// </summary>
    [Parameter]
    public int? PageNumber { get; set; } = null;


    /// <summary>
    /// Error message
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; } = "";

    [SupplyParameterFromQuery(Name = "db_error")]
    public string? DBerrorMessage { get; set; } = null;

    [SupplyParameterFromQuery(Name = "new_id")]
    public string LastInsertedId { get; set; } = "-1";

    /// <summary>
    /// This property has no BaseUrl
    /// </summary>
    [CascadingParameter(Name = "StateKey")]
    public AppStateKey? StateKey { get; set; }

    private int defaultPageSize;
    private int buttonCount;
    private PgResponse<Customer>? currentPage = null;

    //    private StateData? state;

    /// <summary>
    /// Cascading parameter
    /// </summary>
    private StateForComponent? currentState = null;
    private AppStateKey? stateId;

    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(1000);  // Test for stream rendering
        string? userId = cookieService.GetCookie("WebTransitions");

        string activeCultureStr = Configuration == null ? "en-US" : (Configuration["AppSettings:ActiveCulture"] ?? "en-US");
        this.defaultPageSize = dbSVC.GetDefaultPageSize(Configuration, "Customers");
        this.buttonCount = dbSVC.GetPGButtonCount(Configuration, "Customers");

        Debug.Assert(StateKey != null && !String.IsNullOrEmpty(StateKey.AppName) && !String.IsNullOrEmpty(StateKey.UserId));
        stateId = new AppStateKey(StateKey.AppName, userId ?? StateKey.UserId, "Customers");
        AppState? stateData = await StateManager.GetEntityByIdAsync(stateId);       // Read state for the 'Customers' component
        if (stateData == null)
        {
            stateData = await CreateNewState(stateId);
        }
        currentState = (StateForComponent)stateData;
        if (String.IsNullOrEmpty(currentState.FilterState.Item2))
        {
            currentState.FilterState = new Tuple<string, string, bool>("", "", false);
        }

        SortParameter = new List<string>();
        for (int i = 0; i < FieldNames.Length; i++)
        {
            SortParameter.Add($"n_{FieldNames[i]}");
        }

        ActiveCulture = new CultureInfo(activeCultureStr);
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Read state and parameters 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!String.IsNullOrEmpty(Argument))    // Modify the state
        {
            if (Action == "sort")
            {
                Tuple<string?, string> newSort = dbSVC.SetSort(Argument, true);
                this.currentState!.SortState = $"{newSort.Item1}_{newSort.Item2}";
            }
            else if (Action == "page")
            {
                this.currentState!.PreparePaging(this.Argument, NavManager, "Customers", PageNumber ?? 1);
            }
            else 
            {
                throw new Exception($"Action '{Action}' is invalid.");
            }
        }
        if (!String.IsNullOrEmpty(this.LastInsertedId))
        {
            this.currentState!.LastInsertedId = this.LastInsertedId;
        }

        if (String.IsNullOrEmpty(Action))
        {
            this.Action = "page";
        }
        SortParameter = dbSVC.ProcessCurrentPage(this.currentState!, FieldNames);
        currentPage = await dbSVC.GetCurrentPageAsync(this.currentState!);      // Read data for this page
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        this.LastInsertedId = "-1";
    }

    private string GetBoldClass(string customerId)
    {
        if (String.IsNullOrEmpty(this.LastInsertedId) || this.LastInsertedId != customerId)
        {
            return "fw-normal";
        }
        else
        {
            return "fw-bold";
        }
    }

    /// <summary>
    /// The procedure writes the modified state into th dbo.AppStates table. The application executes the code before closing the page (sitching to the another page or closing the application).
    /// </summary>
    /// <returns></returns>
    public async ValueTask DisposeAsync()
    {
        Debug.Assert(this.currentState != null);
        var x = (AppState)this.currentState;
        await this.StateManager.UpdateEntity(x, false);
    }

    /// <summary>
    /// The application executes this code after commiting the filter control.
    /// </summary>
    /// <param name="message"></param>
    public async Task FilterChangedHandler(Tuple<string, string, bool> message)
    {
        Debug.Assert(this.currentState != null);
        this.currentState.FilterState = message;
        await this.StateManager.UpdateEntity((AppState)this.currentState, false);
        NavManager.Refresh(true);
        //NavManager.NavigateTo($"/{this.currentState.ComponentName}", true);  // Refresh this page
    }

    private async Task<AppState> CreateNewState(AppStateKey stateId)
    {
        Debug.Assert(!String.IsNullOrEmpty(stateId.AppName) && !String.IsNullOrEmpty(stateId.UserId) && !String.IsNullOrEmpty(stateId.ComponentName));
        var newState = new AppState()
            {
                AppName = stateId.AppName,
                UserId = stateId.UserId,
                ComponentName = stateId.ComponentName,
                SortState = "",
                FilterFieldName = "",
                FilterFieldValue = "",
                FilterIsDateValue = (short)0,
                PagerButtonCount = this.buttonCount,
                PagerRowCount = 0,      // The application will set actual value after reading dbo.Customers table
                PagerPageCount = 0,     // The application will set actual value after reading dbo.Customers table
                PagerPageNumber = 1,    // Display first page
                PagerPageSize = this.defaultPageSize,
                PagerBaseUrl = "Customers",
                IsDeleted = (byte)0,
                LastInsertedId = "-1"   // The application has no information about insertion
            };
        return await StateManager.CreateEntity(newState);
    }
}
