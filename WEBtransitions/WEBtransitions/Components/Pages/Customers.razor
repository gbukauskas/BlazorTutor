@page "/Customers/{action?}/{pagesize:int?}/{pagenumber:int?}/{errormessage?}"

@*
  Parameter action defines type of parameters:
    <list type="bullet">
        <code>sort</code> - sort parameters
        <code>page</code> - parameters for pager
        <code>filter</code> - filtering
        <code>none<code> - start page, no parameters
    </list>
*@

@using System.Globalization
@using System.Reflection
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using System.Diagnostics
@using WEBtransitions.ClassLibraryDatabase.CustomPager
@using WEBtransitions.Services
@using WEBtransitions.Services.Interfaces

@attribute [StreamRendering(true)]

@inject CustomerSvc dbSVC
@inject IConfiguration Configuration
@inject NavigationManager NavManager
@inject IStateData state

<PageTitle>Customers</PageTitle>

@if (currentPage == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table reportTable" name="list-of-Customers">
        <caption>Customers</caption>
        <thead>
            <tr>
                @* 
                <th name="CompanyName" data-sort="@SortParameter[0].Substring(0, 1)">
                    <a href="/Customers/@SortParameter[0]">Company name</a>
                </th>
                <th name="ContactName" data-sort="@SortParameter[1].Substring(0, 1)">
                    <a href="/Customers/@SortParameter[1]">Contact name</a>
                </th>
                <th name="ContactTitle" data-sort="@SortParameter[2].Substring(0, 1)">
                    <a href="/Customers/@SortParameter[2]">Contact Title</a>
                </th>
                <th name="Address" data-sort="@SortParameter[3].Substring(0, 1)">
                    <a href="/Customers/@SortParameter[3]">Address</a>
                </th>
                <th name="City" data-sort="@SortParameter[4].Substring(0, 1)">
                    <a href="/Customers/@SortParameter[4]">City</a>
                </th>
                <th name="Region" data-sort="@SortParameter[5].Substring(0, 1)">
                    <a href="/Customers/@SortParameter[5]">Region</a>
                </th>
                <th name="PostalCode" data-sort="@SortParameter[6].Substring(0, 1)">
                    <a href="/Customers/@SortParameter[6]">Postal Code</a>
                </th>
                <th name="Country" data-sort="@SortParameter[7].Substring(0, 1)">
                    <a href="/Customers/@SortParameter[7]">Country</a>
                </th>
 *@
                <th name="CompanyName">Company name</th>
                <th name="ContactName">Contact name</th>
                <th name="ContactTitle">Contact Title</th>
                <th name="Address">Address</th>
                <th name="City">City</th>
                <th name="Region">Region</th>
                <th name="PostalCode">Postal Code</th>
                <th name="Country">Country</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cust in currentPage.Items)
            {
                <tr>
                    <td>@cust.CompanyName</td>
                    <td>@cust.ContactName</td>
                    <td>@cust.ContactTitle</td>
                    <td>@cust.Address</td>
                    <td>@cust.City</td>
                    <td>@cust.Region</td>
                    <td>@cust.PostalCode</td>
                    <td>@cust.Country</td>
                </tr>
            }
        </tbody>
    </table>

    <PagerControl MaxButtons=@buttonCount PageCount=@currentPage.TotalPages TotalRecords=@currentPage.TotalRecords.ToString() PageNumber=@currentPage.PageNumber
    PageSize="@currentPage.PageSize" BaseUrl="Customers/page" ErrorMessage="@ErrorMessage"/>

}

@code {
    //    private Customer[]? CurrentPage;
    private CultureInfo ActiveCulture = CultureInfo.CurrentCulture;

    /// <summary>
    /// Current page
    /// </summary>
    [Parameter]
    public string? Action { get; set; } = null;

    /// <summary>
    /// Current page
    /// </summary>
    [Parameter]
    public int? PageNumber { get; set; } = null;

    /// <summary>
    /// Number of rows in the page
    /// </summary>
    [Parameter]
    public int? PageSize { get; set; } = null;

    /// <summary>
    /// Error message
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; } = "";

    private int pageNumber;
    private int pageSize;
    private int buttonCount;
    private PgResponse<Customer>? currentPage = null;
    private StateForComponent? currentState = null;

    protected override async Task OnInitializedAsync()
    {
        //        await Task.Delay(1000);  // Test for stream rendering

        string activeCultureStr = Configuration == null ? "en-US" : (Configuration["AppSettings:ActiveCulture"] ?? "en-US");
        string defaultPageSizeStr = Configuration == null ? "9" : (Configuration["AppSettings:defaultPgSize"] ?? "9");
        if (!int.TryParse(defaultPageSizeStr, out this.pageSize))
        {
            this.pageSize = 9;
        }
        string maxButtonsStr = Configuration == null ? "10" : (Configuration["AppSettings:maxButtons"] ?? "10");
        if (!int.TryParse(maxButtonsStr, out this.buttonCount))
        {
            this.buttonCount = 10;
        }

        ActiveCulture = new CultureInfo(activeCultureStr);
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Read state and parameters 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        this.currentState = state.GetState("Customers", buttonCount, this.pageSize);
        if (String.IsNullOrEmpty(Action))
        {
            this.Action = "page";
        }

        if (this.Action == "page")
        {
            await ProcessCurrentPage();
            Debug.Assert(this.currentState.PagerState != null);
            state.SetPagerState("Customers", this.currentState.PagerState);
        }
        return;
    }

    private async Task ProcessCurrentPage()
    {
#pragma warning disable CS8602
        if (!this.PageNumber.HasValue && this.currentState.PagerState != null)
        {
            this.PageNumber = this.currentState.PagerState.PageNumber;
        }
        this.pageNumber = this.PageNumber ?? 1;

        ModifyPagerState();
        var tmp = dbSVC.GetAllEntities();
        currentPage = await dbSVC.GetPageAsync(tmp, pageSize, pageNumber);

        this.currentState.PagerState.PageCount = currentPage.TotalPages;
        this.currentState.PagerState.PageNumber = currentPage.PageNumber;
        this.currentState.PagerState.PageSize = currentPage.PageSize;
#pragma warning restore CS8602

    }

    private Tuple<string, string> SetSort(string sortParameter)
    {
        string sortDirection;
        switch (sortParameter.Substring(0, 1))
        {
            case "n":
                sortDirection = "a";
                break;
            case "a":
                sortDirection = "d";
                break;
            default:
                sortDirection = "n";
                break;
        }
        string sortName = sortParameter.Substring(2);
        return new Tuple<string, string>(sortDirection, sortName);
    }

    private void ModifyPagerState()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("current-page", out var _initialCount))
        {
            this.PageNumber = Convert.ToInt32(_initialCount);
        }
        pageNumber = this.PageNumber ?? 1;
        if (this.PageSize.HasValue)
        {
            pageSize = this.PageSize.Value;  // The user changed size of the page 
        }

        // Debug.Assert(this.currentState != null && this.currentState.PagerState == null);
    }
}
