@namespace WEBtransitions
@using System.Diagnostics
@inherits InputBase<string>

<input type="text" name="@Name" value=@Value class="@AllClasses" style="@Style" autocomplete="off" list="@UUID-datalistOptions"
       placeholder="Type a name or select it from the drop-down" @onchange="UpdateSelection" />
<datalist id="@UUID-datalistOptions">
    @ChildContent
</datalist>

@code {
    /// <summary>
    /// Name of the HTML input element
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    /// <summary>
    /// String with style for the input element
    /// </summary>
    [Parameter]
    public string? Style { get; set; }

    /// <summary>
    /// Classes for the input element. Separate elements with a space. Optional.
    /// </summary>
    [Parameter]
    public string? ClassInput { get; set; }

    /// <summary>
    /// Items for the datalist
    /// </summary>
    [Parameter]
    public required RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<string> RegionChanged { get; set; }

    public required string UUID;
    public required string AllClasses;
    private string? InitialValue;

    protected override bool TryParseValueFromString(string? value, out string result, out string validationErrorMessage)
    {
        result = value ?? "";
        if (String.IsNullOrEmpty(value))
        {
            validationErrorMessage = $"Empty values are not allowed in the list of available selections.";
            return false;
        }
        validationErrorMessage = String.Empty;
        return true;
    }

    protected override string FormatValueAsString(string? value)
    {
        return value ??= "";
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UUID = Guid.NewGuid().ToString();   // TODO: patikrinti, kaip dirba keli kontrolsai
        AllClasses = $"@(ClassInput??String.Empty)";
    }

    private async Task UpdateSelection(ChangeEventArgs e)
    {
        string newValue = (string)(e.Value ??= "");
        if (this.InitialValue != newValue)
        {
            await RegionChanged.InvokeAsync(newValue);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this.InitialValue = Value;
    }

}
