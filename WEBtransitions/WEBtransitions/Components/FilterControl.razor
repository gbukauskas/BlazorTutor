@using System.Reflection
@using System.Diagnostics
@using System.Web
@using System.Globalization
@using System.Text.RegularExpressions
@using WEBtransitions.ClassLibraryDatabase.CustomFilter
@using WEBtransitions.CustomErrors
@using WEBtransitions.Services
@using WEBtransitions.Services.Interfaces

@typeparam T where T : class

@implements IDisposable

<div class="filter" name="custom-filter">
    <span class="border-text">Filter</span>
    <EditForm FormName="CustomerFilter" EditContext="editContext" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-controls">
            <label class="item11">Field:</label>

            <div class="item12">
                <select name="field-name" @bind="Model!.Name" @bind:after="ChangeModel">
                    @foreach (FilterElement item in ControlNames)
                    {
                        <option value="@item.Name" selected="@item.IsSelected" disabled="@item.IsDisabled">@item.Name</option>
                    }
                </select>
            </div>

            @if (Model?.IsDateValue == true)
            {
                <label class="item21">Min:</label>
                <div class="item22">
                    <InputText id="value-min" @bind-Value="Model!.Value" name="search-value" title="Date interval: first value" />
                </div>
                <label class="item31">Max:</label>
                <div class="item32">
                    <InputText id="value-max" @bind-Value="Model!.MaxValue" name="search-value" title="Date interval: last value" />
                </div>
            }
            else
            {
                <label class="item21">Value:</label>
                <div class="item22">
                    <InputText id="value" @bind-Value="Model!.Value" name="search-value" title="Part of text" />
                </div>
            }
            <div class="item13">
                <button class="btn btn-sm" type="submit" style="float: right;">
                    <img src="/Images/icons8-search-50.png" alt="Search" width="50" height="50" title="Apply filter" />
                </button>
            </div>
        </div>

    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private FilterModel? Model { get; set; }

    [CascadingParameter(Name = "ActiveCulture")]
    private CultureInfo? activeCulture { get; set; }

    [CascadingParameter(Name = "PageState")]
    private StateForComponent? currentState { get; set; }

    [Parameter]
    public EventCallback<Tuple<string, string, string?, bool>> OnFilterChanged { get; set; }

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    private string className = typeof(T).Name;
    private string filterName = String.Empty;       // currentState!.FilterState!.Item1;
    private string filterValue = String.Empty;      // currentState.FilterState!.Item2;
    private string? filterMaxValue = null;          // currentState.FilterState!.Item3;

#pragma warning disable CS8618
    private List<FilterElement> ControlNames;
#pragma warning restore CS8618

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ControlNames = GetControlNames();
        if (ControlNames.Count < 1)
        {
            throw new DatabaseException($"Class {className} has no AllowFilteringAttribute");
        }
        int filterIndex = 0;
        if (currentState != null && currentState.FilterState != null)
        {
            filterIndex = Math.Max(ControlNames.FindIndex(x => x.Name == currentState.FilterState.Item1), 0);
            Model = new FilterModel(ControlNames[filterIndex]);
        } 
        Model = new FilterModel(ControlNames[filterIndex]);

        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    private List<FilterElement> GetControlNames()
    {
        Debug.Assert(currentState != null && currentState.FilterState != null);

        PropertyInfo[] myPropertyInfo = typeof(T).GetProperties();
        var controlNames = new List<FilterElement>();
        if (currentState != null)
        {
            filterName = currentState.FilterState.Item1;
            filterValue = currentState.FilterState.Item2;
            filterMaxValue = currentState.FilterState.Item3;
        }
        else
        {
            filterName = filterValue = String.Empty;
            filterMaxValue = null;
        }

        controlNames.Add(new FilterElement(null)
        {
            Name = "Select Element",
            Value = "",
            IsDateValue = false,
            IsSelected = String.IsNullOrEmpty(currentState.FilterState.Item2),
            IsDisabled = true
        });


        for (int i = 0; i < myPropertyInfo.Length; i++)
        {
            var propertyAttributes = myPropertyInfo[i].GetCustomAttributes(typeof(AllowFilteringAttribute), false);
            //            Model!.Value = "No filtering";
            if (propertyAttributes.Length > 0 && propertyAttributes.Length < i)
            {
                var item = FilterElement.CreateFilterElement(myPropertyInfo[i]);

                if (!String.IsNullOrEmpty(filterName) && item.Name == filterName)
                {
                    item.IsSelected = true;
                    item.Value = filterValue;
                    item.MaxValue = filterMaxValue;
                    Model = new FilterModel(item);
                }
                controlNames.Add(item);
            }
        }
        return controlNames;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        Func<string?, bool> dateIsValid = dateStr => String.IsNullOrEmpty(dateStr) || DateRegex.IsMatch(dateStr);

        Debug.Assert(this.Model != null && !String.IsNullOrEmpty(this.Model.Name) && this.messageStore != null);
        Debug.Assert(this.ControlNames != null && this.ControlNames.Count > 0);

        messageStore.Clear();
        FilterElement? currentElement = ControlNames.Find(x => x.Name == this.Model.Name);
        if (currentElement == null)
        {
            throw new Exception($"Name {this.Model.Name} is invalid.");
        }
        Model.IsDateValue = currentElement.IsDateValue;
        if (currentElement.IsDateValue)
        {
            if (!dateIsValid(this.Model.Value) || !dateIsValid(this.Model.MaxValue))
            {
                messageStore.Add(() => Model.Name, $"Date {this.Model.Value} has invalid format.");
                editContext!.NotifyValidationStateChanged();
            }

/*
            if (!DateIsValid(this.Model.Value) || !DateIsValid(this.Model.MaxValue))
            {
                messageStore.Add(() => Model.Name, $"Date {this.Model.Value} has invalid format.");
                editContext!.NotifyValidationStateChanged();
            }
            if (!String.IsNullOrEmpty(this.Model.Value) && !DateTime.TryParse(this.Model.Value, activeCulture, out filterdate))
            {
                messageStore.Add(() => Model.Name, $"Date {this.Model.Value} has invalid format.");
                editContext!.NotifyValidationStateChanged();
                }
            if (!String.IsNullOrEmpty(this.Model.MaxValue) && !DateTime.TryParse(this.Model.MaxValue, activeCulture, out filterdate))
            {
                messageStore.Add(() => Model.Name, $"Date {this.Model.Value} has invalid format.");
                editContext!.NotifyValidationStateChanged();
                }
*/
        } 
        if (String.IsNullOrEmpty(Model.Value) && String.IsNullOrEmpty(Model.MaxValue))
        {
            // messageStore.Add(() => Model.Name, $"Select some name and write not empty string into the 'Value' box.");
            // editContext!.NotifyValidationStateChanged();
            for (int i = 0; i < ControlNames.Count; i++)
            {
                ControlNames[i].IsSelected = i < 1;
            }
            Model = ControlNames[0];
            var filterState = new Tuple<string, string, string?, bool>(Model.Name ?? "", "", "", false);
            OnFilterChanged.InvokeAsync(filterState);
        }
    }

    private static readonly Regex DateRegex = new Regex("^\\d{4}-\\d{1,2}-\\d{1,2}/$");
    /// <summary>
    /// The function returns true for a valid date format
    /// </summary>
    /// <param name="dateStr">Date value in string format</param>
    /// <returns><code>true</code> - in case of correct date dormat</returns>
    private bool DateIsValid(string? dateStr)
    {
        return String.IsNullOrEmpty(dateStr) || DateRegex.IsMatch(dateStr);
    }

    public async Task ChangeModel()
    {
        await Task.Delay(1);
        if (Model != null && !String.IsNullOrEmpty(Model.Name)) 
        {
            string fieldName = Model.Name;
            foreach (var currentModel in ControlNames)
            {
                currentModel.IsSelected = currentModel.Name == fieldName;
                if (currentModel.IsSelected)
                {
                    Model.IsDateValue = currentModel.IsDateValue;
                }
            }
        }
    }

    public void Dispose()
    {
        if (editContext != null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

    private void Submit()
    {
        Debug.Assert(Model != null);
        Debug.Assert(this.currentState != null);

        string searchValue = String.IsNullOrEmpty(Model.Value) ? "" : Model.Value;
        string searchValueMax = String.IsNullOrEmpty(Model.MaxValue) ? "" : Model.MaxValue;
        if (String.IsNullOrEmpty(searchValue) && String.IsNullOrEmpty(searchValueMax))
        {
            Model.Name = null;
            ControlNames.ForEach(x => x.IsSelected = false);
        }
        var filterState = new Tuple<string, string, string?, bool>(Model.Name ?? "", searchValue, searchValueMax, Model.IsDateValue);

        // bool filterWasChanged = filterState.Item1 != filterName ||
        //                         filterState.Item2 != filterValue ||
        //                         filterState.Item3 != null && filterState.Item3 != filterMaxValue ||
        //                         filterState.Item3 is null && !String.IsNullOrEmpty(filterMaxValue);

        // if (filterWasChanged)
        // {
        //     OnFilterChanged.InvokeAsync(filterState);
        // }
        OnFilterChanged.InvokeAsync(filterState);
    }
}
