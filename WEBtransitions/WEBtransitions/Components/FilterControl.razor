@using System.Reflection
@using System.Diagnostics
@using System.Web
@using System.Globalization
@using WEBtransitions.ClassLibraryDatabase.CustomFilter
@using WEBtransitions.CustomErrors
@using WEBtransitions.Services
@using WEBtransitions.Services.Interfaces
@typeparam T where T : class

@implements IDisposable

<div class="filter" name="custom-filter">
    <span class="border-text">Filter</span>
    <EditForm FormName="CustomerFilter" EditContext="editContext" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-controls">
            <label class="item11">Field:</label>
            <div class="item12">
                <InputSelect @bind-value="Model!.Name" name="field-name">
                    @foreach (FilterElement item in ControlNames)
                    {
                        <option value="@item.Name" selected="@item.IsSelected" disabled="@item.IsDisabled">@item.Name</option>
                    }
                </InputSelect>
            </div>
            <label class="item21">Value:</label>
            <div class="item22">
                <InputText id="title" @bind-Value="Model!.Value" name="search-value" title="Select field name and value" />
            </div>
            <div class="item13">
                <button class="btn btn-sm" type="submit" style="float: right;">
                    <img src="/Images/icons8-search-50.png" alt="Search" width="50" height="50" title="Apply filter" />
                </button>
            </div>
        </div>

    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private FilterModel? Model { get; set; }

    [CascadingParameter(Name = "ActiveCulture")]
    private CultureInfo? activeCulture { get; set; }

    [CascadingParameter(Name = "PageState")]
    private StateForComponent? currentState { get; set; }

    [Parameter]
    public EventCallback<Tuple<string, string, bool>> OnFilterChanged { get; set; }

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    private string className = typeof(T).Name;
    private string filterName = String.Empty;   // currentState!.FilterState!.Item1;
    private string filterValue = String.Empty;  // currentState.FilterState!.Item2;


#pragma warning disable CS8618
    private List<FilterElement> ControlNames;
#pragma warning restore CS8618

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ControlNames = GetControlNames();
        if (ControlNames.Count < 1)
        {
            throw new DatabaseException($"Class {className} has no AllowFilteringAttribute");
        }
        if (Model == null)
        {
            Model = new FilterModel(ControlNames[0]);   // No element is selected
        }
        editContext = new(Model);

        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    private List<FilterElement> GetControlNames()
    {
        Debug.Assert(currentState != null && currentState.FilterState != null);

        PropertyInfo[] myPropertyInfo = typeof(T).GetProperties();
        var controlNames = new List<FilterElement>();
        if (!String.IsNullOrEmpty(currentState.FilterState.Item1) && !String.IsNullOrEmpty(currentState.FilterState.Item2))
        {
            filterName = currentState.FilterState.Item1;
            filterValue = currentState.FilterState.Item2;
        } 
        else
        {
            filterName = filterValue = String.Empty;
        }

        controlNames.Add(new FilterElement()
        {
            Name = "Select Element",
            Value = "",
            IsDateValue = false,
            IsSelected = String.IsNullOrEmpty(currentState.FilterState.Item2),
            IsDisabled = true
        });


        for (int i = 0; i < myPropertyInfo.Length; i++)
        {
            var propertyAttributes = myPropertyInfo[i].GetCustomAttributes(typeof(AllowFilteringAttribute), false);
            //            Model!.Value = "No filtering";
            if (propertyAttributes.Length > 0)
            {
                var item = new FilterElement(myPropertyInfo[i]);

                if (!String.IsNullOrEmpty(filterName) && item.Name == filterName)
                {
                    item.IsSelected = true;
                    item.Value = filterValue;
                    Model = new FilterModel(item);
                }
                controlNames.Add(item);
            }
        }
        return controlNames;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        Debug.Assert(this.Model != null && !String.IsNullOrEmpty(this.Model.Name) && this.messageStore != null);
        Debug.Assert(this.ControlNames != null && this.ControlNames.Count > 0);

        messageStore.Clear();
        FilterElement? currentElement = ControlNames.Find(x => x.Name == this.Model.Name);
        if (currentElement == null)
        {
            throw new Exception($"Name {this.Model.Name} is invalid.");
        }
        Model.IsDateValue = currentElement.IsDateValue;
        if (currentElement.IsDateValue)
        {
            DateTime filterdate;
            if (!DateTime.TryParse(this.Model.Value, activeCulture, out filterdate))
            {
                messageStore.Add(() => Model.Name, $"Date {this.Model.Value} has invalid format.");
                editContext!.NotifyValidationStateChanged();
            }
        }
        if(String.IsNullOrEmpty(Model.Value))
        {
            // messageStore.Add(() => Model.Name, $"Select some name and write not empty string into the 'Value' box.");
            // editContext!.NotifyValidationStateChanged();
            Model.Name = ControlNames[0].Name;
        }
    }

    public void Dispose()
    {
        if (editContext != null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

    private void Submit()
    {
        Debug.Assert(Model != null);
        Debug.Assert(this.currentState != null);

        string searchValue = String.IsNullOrEmpty(Model.Value) ? "" : Model.Value;
        if (String.IsNullOrEmpty(searchValue))
        {
            Model.Name = null;
            ControlNames.ForEach(x => x.IsSelected = false);
        }

        var filterState = Tuple.Create(Model.Name ?? "", searchValue, Model.IsDateValue);
/*
        int i = Math.Max(ControlNames.FindIndex(0, (x) => x.Name == filterState.Item1), 0);     // Clear Error messages
        Model = new FilterModel(ControlNames[i]);
*/
        if (filterState.Item1 != filterName || filterState.Item2 != filterValue)
        {
            OnFilterChanged.InvokeAsync(filterState);
        }
    }
}
